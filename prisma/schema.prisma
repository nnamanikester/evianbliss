// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id String @id @default(auto())  @map("_id") @db.ObjectId
  fullname String
  email String
  phone String @unique(sort: Desc)
  dob DateTime?
  appointments Appointment[]
  createAt DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id, phone, email])
}

model Category {
  id String @id @default(auto())  @map("_id") @db.ObjectId
  name String
  status Status? @default(active)
  services Service[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Service {
  id String @id @default(auto())  @map("_id") @db.ObjectId
  name String
  slug String
  description String @db.String
  category_id String?
  image String?
  priceFrom Float?
  priceTo Float?
  fixedPrice Float?
  duration String?
  status Status @default(active) // active, inactive
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  category Category? @relation(fields: [category_id], references: [id], onDelete: Cascade)
  @@index([id, slug, name(sort: Desc), status])
}

model Appointment {
  id String @id @default(auto())  @map("_id") @db.ObjectId
  service String?
  returning Boolean @default(false)
  customer_id String
  time DateTime
  status AppointmentStatus @default(pending) // pending, expired, done
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  customer Customer @relation(fields: [customer_id], references: [id])
}

model Blog {
  id String @id @default(auto())  @map("_id") @db.ObjectId
  title String
  slug String
  description String  @db.String
  exerpt String  @db.String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Employee {
  id String @id @default(auto())  @map("_id") @db.ObjectId
  fullname String
  role String
  dob String?
  salary Float
  email String @unique()
  phone String @unique()
  join_date DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id, email, phone])
}

model Account {
  id                 String  @id @default(auto())  @map("_id") @db.ObjectId
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto())  @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto())  @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role    @default(user) // admin, user, manager, epmloyee, customer
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  id  String @id @default(auto())  @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}


enum Role {
  admin
  manager
  epmloyee
  user
  customer
}

enum Status {
  active
  inactive
}

enum AppointmentStatus {
  pending
  expired
  done
}